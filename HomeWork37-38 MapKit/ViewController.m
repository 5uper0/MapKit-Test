//
//  ViewController.m
//  HomeWork 37-38 MKMap
//
//  Created by Oleh Veheria on 6/15/16.
//  Copyright Â© 2016 Selfie. All rights reserved.
//

#import "ViewController.h"
#import "OVStudent.h"
#import "OVMapAnnotation.h"
#import "UIView+MKAnnotationView.h"
#import "OVCircle.h"

#import <MapKit/MapKit.h>

@interface ViewController () <MKMapViewDelegate, UIPopoverPresentationControllerDelegate, UITableViewDataSource, UITableViewDelegate, UIGestureRecognizerDelegate>

@property (strong, nonatomic) NSArray *studentsArray;
@property (strong, nonatomic) OVStudent *currentStudent;
@property (strong, nonatomic) CLGeocoder *geoCoder;
@property (strong, nonatomic) NSString *address;
@property (strong, nonatomic) MKCircle *circleOverlay;
@property (strong, nonatomic) MKCircleRenderer *circleRenderer;
@property (strong, nonatomic) MKDirections *directions;
@property (assign, nonatomic) CLLocationCoordinate2D meetCoordinate;
@property (strong, nonatomic) NSArray *circlesArray;

@end

typedef enum : NSUInteger {
    OVCircleNameRed,
    OVCircleNameOrange,
    OVCircleNameGreen
    
} OVCircleName;

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    
    UIBarButtonItem *zoomButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSearch
                                                                          target:self
                                                                          action:@selector(actionZoom:)];
    
    UIBarButtonItem *flexibleSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                                                                                   target:self
                                                                                   action:nil];
    
    UIBarButtonItem *addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd
                                                                                target:self
                                                                                action:@selector(actionAdd:)];
    
    self.navigationItem.rightBarButtonItems = @[flexibleSpace, addButton, zoomButton];
    
    [self studentsArrayInitWithCoordinates];
    self.geoCoder = [[CLGeocoder alloc] init];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)dealloc {
    if ([self.geoCoder isGeocoding]) {
        [self.geoCoder cancelGeocode];
    }
    if ([self.directions isCalculating]) {
        [self.directions cancel];
    }
}

#pragma mark - Private Methods

- (void)addOverlaysWithMeetAnnotation:(OVMapAnnotation *)meetAnnotation {
    
    NSString *title = @"Meeting Point";
    self.meetCoordinate = meetAnnotation.coordinate;
    
    CLLocationDistance redRadius = 15000.0;
    CLLocationDistance orangeRadius = 10000.0;
    CLLocationDistance greenRadius = 5000.0;
    
    MKCircle *redCircleOverlay = [MKCircle circleWithCenterCoordinate:meetAnnotation.coordinate radius:redRadius];
    MKCircle *orangeCircleOverlay = [MKCircle circleWithCenterCoordinate:meetAnnotation.coordinate radius:orangeRadius];
    MKCircle *greenCircleOverlay = [MKCircle circleWithCenterCoordinate:meetAnnotation.coordinate radius:greenRadius];
    
    for (id <MKOverlay>overlay in self.mapView.overlays) {
        [self.mapView removeOverlay:overlay];
    }
    
    [redCircleOverlay setTitle:@"redCircleOverlay"];
    [orangeCircleOverlay setTitle:@"orangeCircleOverlay"];
    [greenCircleOverlay setTitle:@"greenCircleOverlay"];
    
    [self.mapView addOverlays:@[greenCircleOverlay, orangeCircleOverlay, redCircleOverlay] level:MKOverlayLevelAboveRoads];
    
    OVCircle *redCircleArray = [[OVCircle alloc] init];
    OVCircle *orangeCircleArray = [[OVCircle alloc] init];
    OVCircle *greenCircleArray = [[OVCircle alloc] init];
    
    redCircleArray.name = @"Red Circle";
    orangeCircleArray.name = @"Orange Circle";
    greenCircleArray.name = @"Green Circle";
    
    redCircleArray.itemsArray = [NSMutableArray array];
    orangeCircleArray.itemsArray = [NSMutableArray array];
    greenCircleArray.itemsArray = [NSMutableArray array];
    
    NSUInteger checkCounter = 0;
    
    for (OVMapAnnotation *annotation in self.mapView.annotations) {
        
        MKMapPoint meetPoint = MKMapPointForCoordinate(meetAnnotation.coordinate);
        MKMapPoint peoplePoint = MKMapPointForCoordinate(annotation.coordinate);
        
        annotation.distance = MKMetersBetweenMapPoints(meetPoint, peoplePoint);
        
        if ([annotation.title isEqualToString:title] || annotation.distance > redRadius) {
            checkCounter++;
            continue;
        }
        
        if (annotation.distance <= redRadius && annotation.distance > orangeRadius) {
            [redCircleArray.itemsArray addObject:annotation];
            
        } else if (annotation.distance <= orangeRadius && annotation.distance > greenRadius) {
            [orangeCircleArray.itemsArray addObject:annotation];
            
        } else if (annotation.distance <= greenRadius) {
            [greenCircleArray.itemsArray addObject:annotation];
           
        } else {
            checkCounter++;
        }
    }
    
    if (checkCounter == [self.mapView.annotations count]) {
        [self showAlertWithTitle:@"No Friends Found" andMessage:@"Try Again"];
        
    } else {
        
        self.circlesArray = @[redCircleArray, orangeCircleArray, greenCircleArray];
        [self showFriendsDistancePopup];

    }
}

- (void)addAnnotationWithTitle:(NSString *)title
                      subtitle:(NSString *)subtitle
                    coordinate:(CLLocationCoordinate2D)coordinate andStudents:(OVStudent *)student {
    
    OVMapAnnotation *annotation = [[OVMapAnnotation alloc] init];
    
    annotation.title = title;
    annotation.subtitle = subtitle;
    annotation.coordinate = coordinate;
    annotation.student = student;
    
    [self.mapView addAnnotation:annotation];
    
    if (!student) {
        [self addOverlaysWithMeetAnnotation:annotation];
    }
}

- (void)showAlertWithTitle:(NSString *)title andMessage:(NSString *)message {
    
    UIAlertController* alert =
    [UIAlertController alertControllerWithTitle:title
                                        message:message
                                 preferredStyle:UIAlertControllerStyleAlert];
    
    UIAlertAction* defaultAction =
    [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault
                           handler:^(UIAlertAction * action) {}];
    
    [alert addAction:defaultAction];
    [self presentViewController:alert animated:YES completion:nil];
}

- (void)showFriendsDistancePopup {
    
    NSUInteger tableLength = 0;
    
    for (OVCircle *array in self.circlesArray) {
        if ([array.itemsArray count] > 0) {
            tableLength += [array.itemsArray count] * 44 + 28;
        }
    }
    
    UITableViewController *tableController = [[UITableViewController alloc] init];
    tableController.preferredContentSize = CGSizeMake(300, tableLength);
    
    UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:tableController];
    navController.modalPresentationStyle = UIModalPresentationPopover;
    
    UITableView *tableView = [[UITableView alloc] initWithFrame:tableController.view.frame style:UITableViewStylePlain];
    
    tableView.delegate = self;
    tableView.dataSource = self;
    tableView.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;
    
    tableView.backgroundColor = [UIColor colorWithWhite:1.0 alpha:1.0];
    tableView.alpha = 1.f;
    
    tableController.tableView = tableView;
    tableController.navigationItem.title = @"Meeting People";
    
    
    UIBarButtonItem *backButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone
                                                                                target:self
                                                                                action:@selector(actionCloseInfo:)];
    backButton.style = UIBarButtonItemStylePlain;
    tableController.navigationItem.rightBarButtonItem = backButton;
    
    UIBarButtonItem *directionButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd
                                                                                     target:self
                                                                                     action:@selector(actionDirection:)];
    backButton.style = UIBarButtonItemStylePlain;
    tableController.navigationItem.leftBarButtonItem = directionButton;
    
    [self presentViewController:navController animated:YES completion:nil];
    
    UIPopoverPresentationController *popController = [navController popoverPresentationController];
    popController.permittedArrowDirections = UIPopoverArrowDirectionDown;
    popController.canOverlapSourceViewRect = YES;
    popController.delegate = self;
    
    popController.backgroundColor = [UIColor colorWithWhite:1.0 alpha:0.5];
    
    popController.sourceView = self.mapView;
}

- (BOOL)randomBoolWithYesPercentage:(NSUInteger)percentage {
    return arc4random_uniform(100) < percentage;
}

- (void)studentsArrayInitWithCoordinates {
    
    NSMutableArray *students = [NSMutableArray array];
    NSUInteger studentsCount = 30;
    
    for (int i = 0; i < studentsCount; i++) {
        
        OVStudent *student = [OVStudent generateRandomStudent];
        
        [students addObject:student];
        
        
        NSString *title = [NSString stringWithFormat:@"%@ %@", student.firstName, student.lastName];
        
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setDateFormat:@"dd/MM/yyyy"];
        NSString *subtitle = [dateFormatter stringFromDate:student.dateOfBirth];
   
        [self addAnnotationWithTitle:title subtitle:subtitle coordinate:student.coordinate andStudents:student];
    }
    
    self.studentsArray = [NSArray arrayWithArray:students];
}

#pragma mark - Actions

- (void)actionAdd:(UIBarButtonItem *)sender {
    
    NSString *title = @"Meeting Point";
    NSString *subtitle = @"Let's go for a walk!";
    CLLocationCoordinate2D coordinate = self.mapView.region.center;
    
    [self addAnnotationWithTitle:title subtitle:subtitle coordinate:coordinate andStudents:nil];
}

- (void)actionDirection:(UIBarButtonItem *)sender {
    [self dismissViewControllerAnimated:YES completion:nil];
    
    if ([self.directions isCalculating]) {
        [self.directions cancel];
    }
    
    for (MKOverlayRenderer *overlay in self.mapView.overlays) {
        if ([overlay isKindOfClass:[MKPolyline class]]) {
            id <MKOverlay> idOverlay = overlay.overlay;
            [self.mapView removeOverlay:idOverlay];
        }
    }
    
    for (OVCircle *circle in self.circlesArray) {
        BOOL isGoing = NO;
        
        for (OVMapAnnotation *annotation in circle.itemsArray) {
            
            if ([circle.name isEqualToString:@"Red Circle"]) {
                isGoing = [self randomBoolWithYesPercentage:10];
                
            } else if ([circle.name isEqualToString:@"Orange Circle"]) {
                isGoing = [self randomBoolWithYesPercentage:50];
                
            } else if ([circle.name isEqualToString:@"Green Circle"]) {
                isGoing = [self randomBoolWithYesPercentage:90];
            }
            
            NSLog(@"isGoing = %@", isGoing ? @"YES" : @"NO");
            
            if (isGoing) {
                MKDirectionsRequest *request = [[MKDirectionsRequest alloc] init];
                
                MKPlacemark *sourcePlacemark = [[MKPlacemark alloc] initWithCoordinate:annotation.coordinate
                                                                     addressDictionary:nil];
                MKMapItem *sourceMapItem = [[MKMapItem alloc] initWithPlacemark:sourcePlacemark];
                
                MKPlacemark *placemark = [[MKPlacemark alloc] initWithCoordinate:self.meetCoordinate
                                                               addressDictionary:nil];
                MKMapItem *destinationMapItem = [[MKMapItem alloc] initWithPlacemark:placemark];
               
                request.source = sourceMapItem;
                request.destination = destinationMapItem;
                request.transportType = MKDirectionsTransportTypeAny;
                request.requestsAlternateRoutes = NO;
                
                self.directions = [[MKDirections alloc] initWithRequest:request];
                
                [self.directions calculateDirectionsWithCompletionHandler:^(MKDirectionsResponse * _Nullable response, NSError * _Nullable error) {
                    if (error) {
                        [self showAlertWithTitle:@"Directions Error" andMessage:[error localizedDescription]];
                        
                    } else if ([response.routes count] == 0) {
                        [self showAlertWithTitle:@"Directions Error" andMessage:@"No routes found"];
                        
                    } else {
                        
                        NSMutableArray *array = [NSMutableArray array];
                        
                        for (MKRoute *route in response.routes) {
                            [array addObject:route.polyline];
                        }
                        
                        [self.mapView addOverlays:array level:MKOverlayLevelAboveRoads];
                    }
                }];
            }
        }
    }
}

- (void)actionCloseInfo:(UIBarButtonItem *)sender {
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)actionInfo:(UIButton *)sender {

    UITableViewController *tableController = [[UITableViewController alloc] init];
    
    tableController.preferredContentSize = CGSizeMake(250, 4 * 44);
    
    UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:tableController];
    navController.modalPresentationStyle = UIModalPresentationPopover;
    
    UITableView *tableView = [[UITableView alloc] initWithFrame:tableController.view.frame style:UITableViewStyleGrouped];
    
    tableView.delegate = self;
    tableView.dataSource = self;
    tableView.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;
    
    tableController.tableView = tableView;
    tableController.navigationItem.title = @"User Info";
    
    UIBarButtonItem *backButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone
                                                                                target:self
                                                                                action:@selector(actionCloseInfo:)];
    backButton.style = UIBarButtonItemStylePlain;
    tableController.navigationItem.rightBarButtonItem = backButton;
    
    [self presentViewController:navController animated:YES completion:nil];
    
    UIPopoverPresentationController *popController = [navController popoverPresentationController];
    popController.permittedArrowDirections = UIPopoverArrowDirectionUp | UIPopoverArrowDirectionDown;
    popController.canOverlapSourceViewRect = NO;
    popController.delegate = self;
    
    popController.sourceView = [sender superview];
    
    MKAnnotationView *annotationView = [sender superAnnotationView];
    
    if (!annotationView) {
        return;
    }
    
    OVMapAnnotation *mapAnnotation = annotationView.annotation;
    OVStudent *student = mapAnnotation.student;
    
    if ([self.geoCoder isGeocoding]) {
        self.address = nil;
        [self.geoCoder cancelGeocode];
    }
    
    CLLocation *location = [[CLLocation alloc] initWithLatitude:student.coordinate.latitude longitude:student.coordinate.longitude];
    
    [self.geoCoder reverseGeocodeLocation:location
                        completionHandler:^(NSArray<CLPlacemark *> * _Nullable placemarks, NSError * _Nullable error) {
                            
                            NSString *message = nil;
                            
                            if (error) {
                                NSLog(@"%@", [error localizedDescription]);
                                
                            } else  {
                                
                                if ([placemarks count] > 0) {
                                    CLPlacemark *placemark = [placemarks firstObject];
                                    message = [NSString stringWithFormat:@"%@, %@", placemark.country, placemark.locality];
                                    
                                } else {
                                    message = @"Not Found";
                                }
                            }
                            self.address = message;
                            
                        }];
    
    
    self.currentStudent = student;
}


- (void)actionZoom:(UIBarButtonItem *)sender {
    
    MKMapRect zoomRect = MKMapRectNull;
    
    for (id <MKAnnotation>annotation in self.mapView.annotations) {
        
        CLLocationCoordinate2D coordinate = annotation.coordinate;
        MKMapPoint center = MKMapPointForCoordinate(coordinate);
        
        static double delta = 20000;
        MKMapRect rect = MKMapRectMake(center.x - delta, center.y - delta, delta * 2, delta * 2);
        
        zoomRect = MKMapRectUnion(zoomRect, rect);
    }
    
    zoomRect = [self.mapView mapRectThatFits:zoomRect];
    
    [self.mapView setVisibleMapRect:zoomRect
                        edgePadding:UIEdgeInsetsMake(50, 50, 50, 50)
                           animated:YES];
    
}

#pragma mark - UITableViewDataSource

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    
    if (tableView.style == UITableViewStyleGrouped) {
        return 1;
        
    } else {
        
        NSInteger count = 0;
        
        for (OVCircle *circle in self.circlesArray) {
            count += [circle.itemsArray count] > 0 ? 1 : 0;
        }
        
        return count;
    }
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    
    if (tableView.style == UITableViewStyleGrouped) {
        return 4;

    } else {
        OVCircle *circle = [self.circlesArray objectAtIndex:section];
        return [circle.itemsArray count];
        
    }
}

- (nullable NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
    
    if (tableView.style == UITableViewStyleGrouped) {
        return nil;
        
    } else {
        OVCircle *circle = [self.circlesArray objectAtIndex:section];
        return circle.name;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    UITableViewCell *cell = nil;
    
    if (tableView.style == UITableViewStyleGrouped) {
        
        static NSString *identifier = @"infoCell";
        
        cell = [tableView dequeueReusableCellWithIdentifier:identifier];
        
        if (!cell) {
            cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:identifier];
        }
        
        OVStudent *student = self.currentStudent;
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        NSString *text = nil;
        NSString *detailText = nil;
        
        if (indexPath.row == 0) {
            text = [NSString stringWithFormat:@"%@ %@", student.firstName, student.lastName];
            detailText = @"Name";
            
        } else if (indexPath.row == 1) {
            [dateFormatter setDateFormat:@"dd/MM/yyyy"];
            text = [dateFormatter stringFromDate:student.dateOfBirth];
            detailText = @"Date Of Birth";
            
        } else if (indexPath.row == 2) {
            text = student.isMale ? @"Male" : @"Female";
            detailText = @"Gender";
            
        } else if (indexPath.row == 3) {
            detailText = @"Address";
            
            if (self.address) {
                text = self.address;
                
            } else {
                text = @"NIL";
            }
        }
        
        cell.textLabel.text = text;
        cell.detailTextLabel.text = detailText;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        
    } else {
        
        static NSString *identifier = @"circlesCell";
        
        cell = [tableView dequeueReusableCellWithIdentifier:identifier];
        
        if (!cell) {
            cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:identifier];
        }
        
        OVCircle *circle = [self.circlesArray objectAtIndex:indexPath.section];
        OVMapAnnotation *annotation = [circle.itemsArray objectAtIndex:indexPath.row];
        OVStudent *student = annotation.student;
        
        cell.textLabel.text = [NSString stringWithFormat:@"%@ %@", student.firstName, student.lastName];
        cell.detailTextLabel.text = [NSString stringWithFormat:@"%.2f m", annotation.distance];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
    }
    
    return cell;
}

#pragma mark - MKMapViewDelegate

- (void)mapView:(MKMapView *)mapView annotationView:(MKAnnotationView *)view didChangeDragState:(MKAnnotationViewDragState)newState fromOldState:(MKAnnotationViewDragState)oldState {
    
    if (newState == MKAnnotationViewDragStateEnding) {
        OVMapAnnotation *annotation = view.annotation;
        [self addOverlaysWithMeetAnnotation:annotation];
    }
}

- (nullable MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation {
    
    if ([annotation isKindOfClass:[MKUserLocation class]]) {
        return  nil;
    }
    
    OVStudent *student = ((OVMapAnnotation *)annotation).student;
    MKAnnotationView *aView = [[MKAnnotationView alloc] init];
    
    if (student) {
        
        static NSString *identifier = @"Annotation";
        
        aView = [mapView dequeueReusableAnnotationViewWithIdentifier:identifier];
        
        if (!aView) {
            aView = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:identifier];
            
            if (student.isMale) {
                aView.image = [UIImage imageNamed:@"Untitled1.png"];
                
            } else {
                aView.image = [UIImage imageNamed:@"Untitled4.png"];
            }
            
            aView.frame = CGRectMake(0, 0, 40, 50);
            aView.canShowCallout = YES;
            aView.draggable = NO;
            
            UIButton *infoButton = [UIButton buttonWithType:UIButtonTypeInfoLight];
            [infoButton addTarget:self action:@selector(actionInfo:) forControlEvents:UIControlEventTouchUpInside];
            aView.rightCalloutAccessoryView = infoButton;
            
        } else {
            aView.annotation = annotation;
        }
        
    } else {
        
        static NSString *meetIdentifier = @"MeetingPlace";
        
        aView = [mapView dequeueReusableAnnotationViewWithIdentifier:meetIdentifier];
        
        if (!aView) {
            aView = [[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:meetIdentifier];
            
            aView.image = [UIImage imageNamed:@"Untitled5.png"];

            aView.frame = CGRectMake(0, 0, 40, 50);
            aView.canShowCallout = YES;
            aView.draggable = YES;
            
            UIButton *infoButton = [UIButton buttonWithType:UIButtonTypeInfoLight];
            [infoButton addTarget:self action:@selector(showFriendsDistancePopup) forControlEvents:UIControlEventTouchUpInside];
            aView.rightCalloutAccessoryView = infoButton;
            
        } else {
            aView.annotation = annotation;
        }
    }
    
    return aView;
}

- (MKOverlayRenderer *)mapView:(MKMapView *)mapView rendererForOverlay:(id < MKOverlay >)overlay {
    
    if ([overlay isKindOfClass:[MKCircle class]]) {
        
        MKCircleRenderer *circleR = [[MKCircleRenderer alloc] initWithCircle:(MKCircle *)overlay];

        if ([[overlay title] isEqualToString:@"redCircleOverlay"]) {
            circleR.fillColor = [[UIColor greenColor] colorWithAlphaComponent:0.1];
            
        } else if ([[overlay title] isEqualToString:@"orangeCircleOverlay"]) {
            circleR.fillColor = [[UIColor greenColor] colorWithAlphaComponent:0.3];
            
        } else if ([[overlay title] isEqualToString:@"greenCircleOverlay"]) {
            circleR.fillColor = [[UIColor greenColor] colorWithAlphaComponent:0.6];
            
        }
        
        return circleR;
        
    } else if ([overlay isKindOfClass:[MKPolyline class]]) {
        
        MKPolylineRenderer *renderer = [[MKPolylineRenderer alloc] initWithOverlay:overlay];
        
        renderer.lineWidth = 2.f;
        renderer.strokeColor = [UIColor colorWithRed:0.f green:0.5f blue:1.f alpha:0.9f];
        
        return renderer;
    }
    
    return nil;
}


@end

/*
 Ð£ÑÐµÐ½Ð¸Ðº.
 
 1. Ð¡Ð¾Ð·Ð´Ð°Ð¹ÑÐµ Ð¼Ð°ÑÑÐ¸Ð² Ð¸Ð· 10 - 30 ÑÐ°Ð½Ð´Ð¾Ð¼Ð½ÑÑ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð², Ð¿ÑÑÐ¼Ð¾ ÐºÐ°Ðº ÑÐ°Ð½ÑÑÐµ, ÑÐ¾Ð»ÑÐºÐ¾ Ð² ÑÑÐ¾Ñ ÑÐ°Ð· Ð¿ÑÑÑÑ Ñ Ð½Ð¸Ñ Ð½Ð°ÑÑÐ´Ñ Ñ Ð¸Ð¼ÐµÐ½ÐµÐ¼ Ð¸ ÑÐ°Ð¼Ð¸Ð»Ð¸ÐµÐ¹ Ð±ÑÐ´ÐµÑ ÐµÑÐµ Ð¸ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÐ°. ÐÐ¾Ð¶ÐµÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ ÑÑÑÑÐºÑÑÑÑ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ, Ð° Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿ÑÐ¾ÑÑÐ¾ Ð´Ð²Ð° Ð´Ð°Ð±Ð»Ð° - Ð»Ð¾Ð½Ð³Ð¸ÑÑÐ´ Ð¸ Ð»Ð°ÑÐ¸ÑÑÐ´.
 
 2. ÐÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ Ð³ÐµÐ½ÐµÑÐ¸ÑÑÐ¹ÑÐµ ÑÐ°Ðº, ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐµ ÑÐµÐ½ÑÑ Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ Ð² Ð²Ð°ÑÐµÐ¼ Ð³Ð¾ÑÐ¾Ð´Ðµ Ð¸ Ð¿ÑÐ¾ÑÑÐ¾ Ð³ÐµÐ½ÐµÑÐ¸ÑÑÐ¹ÑÐµ Ð½ÐµÐ±Ð¾Ð»ÑÑÐ¸Ðµ Ð¾ÑÑÐ¸ÑÐ°ÑÐµÐ»ÑÐ½ÑÐµ Ð»Ð¸Ð±Ð¾ Ð¿Ð¾Ð»Ð¾Ð¶Ð¸ÑÐµÐ»ÑÐ½ÑÐµ ÑÐ¸ÑÐ»Ð°, ÑÑÐ¾Ð±Ñ ÑÐ°Ð½Ð´Ð¾Ð¼Ð½Ð¾ Ð¿Ð¾Ð»ÑÑÐ°Ð»Ð°ÑÑ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÐ° Ð¾Ñ ÑÐµÐ½ÑÑÐ° Ð² Ð¿ÑÐµÐ´ÐµÐ»Ð°Ñ ÑÑÑÐ°Ð½Ð¾Ð²Ð»ÐµÐ½Ð½Ð¾Ð³Ð¾ ÑÐ°Ð´Ð¸ÑÑÐ°.
 
 (ÐÑ Ð° ÐµÑÐ»Ð¸ ÑÐ¾Ð²ÑÐµÐ¼ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐ°ÐµÑÑÑ Ð³ÐµÐ½ÐµÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ, ÑÐ¾ Ð¿ÑÐ¾ÑÑÐ¾ ÑÑÐ°Ð²ÑÑÐµ Ð¸Ð¼ Ð·Ð°Ð³Ð¾ÑÐ¾Ð²Ð»ÐµÐ½Ð½ÑÐµ ÐºÐ¾Ð¾ÑÐ´Ð¸Ð½Ð°ÑÑ - ÑÑÐ¾ Ð½Ðµ Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ)
 
 3. ÐÐ¾ÑÐ»Ðµ ÑÐ¾Ð³Ð¾, ÐºÐ°Ðº Ð²Ñ ÑÐ³ÐµÐ½ÐµÑÐ¸ÑÐ¾Ð²Ð°Ð»Ð¸ ÑÐ²Ð¾Ð¸Ñ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð², Ð¿Ð¾ÐºÐ°Ð¶Ð¸ÑÐµ Ð¸Ñ Ð²ÑÐµÑ Ð½Ð° ÐºÐ°ÑÑÐµ, Ð¿ÑÐ¸ÑÐµÐ¼ Ð² ÑÐ¸ÑÑÐ»Ðµ Ð¿ÑÑÑÑ Ð±ÑÐ´ÐµÑ ÐÐ¼Ñ Ð¸ Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ Ð° Ð² ÑÐ°Ð±ÑÐ¸ÑÑÐ»Ðµ Ð³Ð¾Ð´ ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ. ÐÐ¾Ð¶ÐµÑÐµ Ð´Ð»Ñ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ ÑÑÑÐ´ÐµÐ½ÑÐ° ÑÐ¾Ð·Ð´Ð°ÑÑ ÑÐ²Ð¾Ñ Ð°Ð½Ð½Ð¾ÑÐ°ÑÐ¸Ñ, Ð° Ð¼Ð¾Ð¶ÐµÑÐµ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°ÑÑ Ð½Ð° Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð» Ð°Ð½Ð½Ð¾ÑÐ°ÑÐ¸Ð¹ Ð¸ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð¸Ñ Ð½Ð° ÐºÐ°ÑÑÑ Ð½Ð°Ð¿ÑÑÐ¼ÑÑ - ÐºÐ°Ðº ÑÐ¾ÑÐ¸ÑÐµ :)
 
 Ð¡ÑÑÐ´ÐµÐ½Ñ.
 
 4. ÐÐ¾Ð±Ð°Ð²ÑÑÐµ ÐºÐ½Ð¾Ð¿Ð¾ÑÐºÑ, ÐºÐ¾ÑÐ¾ÑÐ°Ñ Ð¿Ð¾ÐºÐ°Ð¶ÐµÑ Ð²ÑÐµÑ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð½Ð° ÑÐºÑÐ°Ð½Ðµ.
 
 5. ÐÐ¼ÐµÑÑÐ¾ Ð¿Ð¸Ð½Ð¾Ð² Ð½Ð° ÐºÐ°ÑÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ ÑÐ²Ð¾Ð¸ ÐºÐ°ÑÑÐ¾Ð¼Ð½ÑÐµ ÐºÐ°ÑÑÐ¸Ð½ÐºÐ¸, Ð¿ÑÐ¸ÑÐµÐ¼ ÐµÑÐ»Ð¸ ÑÑÑÐ´ÐµÐ½Ñ Ð¼ÑÐ¶ÑÐºÐ¾Ð³Ð¾ Ð¿Ð¾Ð»Ð°, ÑÐ¾ ÐºÐ°ÑÑÐ¸Ð½ÐºÐ° Ð´Ð¾Ð»Ð¶Ð½Ð° Ð±ÑÑÑ Ð¾Ð´Ð½Ð°, Ð° Ð´Ð»Ñ Ð´ÐµÐ²ÑÑÐµÐº Ð´ÑÑÐ³Ð°Ñ.
 
 ÐÐ°ÑÑÐµÑ
 
 6. Ð£ ÐºÐ°Ð¶Ð´Ð¾Ð³Ð¾ ÐºÐ¾Ð»Ð°ÑÑÐ° (ÑÑÐ¾Ð³Ð¾ Ð¾Ð±Ð»Ð°ÑÐºÐ° Ð½Ð°Ð´ Ð¿Ð¸Ð½Ð¾Ð¼) ÑÐ´ÐµÐ»Ð°Ð¹ÑÐµ ÐºÐ½Ð¾Ð¿Ð¾ÑÐºÑ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸ ÑÐ¿ÑÐ°Ð²Ð° ÑÐ°Ðº, ÑÑÐ¾ ÐºÐ¾Ð³Ð´Ð° Ñ Ð½Ð° Ð½ÐµÐµ Ð½Ð°Ð¶Ð¸Ð¼Ð°Ñ Ð²ÑÐ»Ð°Ð·Ð¸Ñ Ð¿Ð¾Ð¿Ð¾Ð²ÐµÑ, Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ Ð² Ð²Ð¸Ð´Ðµ ÑÑÐ°ÑÐ¸ÑÐµÑÐºÐ¾Ð¹ ÑÐ°Ð±Ð»Ð¸ÑÑ Ð½Ð°ÑÐ¾Ð´Ð¸ÑÑÑ Ð¸Ð¼Ñ Ð¸ ÑÐ°Ð¼Ð¸Ð»Ð¸Ñ ÑÑÑÐ´ÐµÐ½ÑÐ°, Ð³Ð¾Ð´ ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ, Ð¿Ð¾Ð» Ð¸ ÑÐ°Ð¼Ð¾Ðµ Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ Ð°Ð´ÑÐµÑ.
 
 7. Ð ÑÐ»ÑÑÐ°Ðµ ÐµÑÐ»Ð¸ ÑÑÐ¾ ÑÐµÐ»ÐµÑÐ¾Ð½, ÑÐ¾ Ð²Ð¼ÐµÑÑÐ¾ Ð¿Ð¾Ð¿Ð¾Ð²ÐµÑÐ° ÐºÐ¾Ð½ÑÑÐ¾Ð»Ð»ÐµÑ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð²ÑÐ»Ð°Ð·Ð¸ÑÑ Ð¼Ð¾Ð´Ð°Ð»ÑÐ½Ð¾.
 
 Ð¡ÑÐ¿ÐµÑÐ¼ÐµÐ½
 
 8. Ð¡Ð¾Ð·Ð´Ð°Ð¹ÑÐµ Ð°Ð½Ð½Ð¾ÑÐ°ÑÐ¸Ñ Ð´Ð»Ñ Ð¼ÐµÑÑÐ° Ð²ÑÑÑÐµÑÐ¸ Ð¸ Ð¿Ð¾ÐºÐ°Ð·ÑÐ²Ð°Ð¹ÑÐµ ÐµÐ³Ð¾ Ð½Ð° ÐºÐ°ÑÑÐµ Ð½Ð¾Ð²ÑÐ¼Ð¾Ð¹ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²ÑÑÑÐµÐ¹ ÐºÐ°ÑÑÐ¸Ð½ÐºÐ¾Ð¹
 
 9. ÐÐµÑÑÐ¾ Ð²ÑÑÑÐµÑÐ¸ Ð¼Ð¾Ð¶Ð½Ð¾ Ð¿ÐµÑÐµÐ¼ÐµÑÐ°ÑÑ Ð¿Ð¾ ÐºÐ°ÑÑÐµ, Ð° ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð½ÐµÑ
 
 10. ÐÐ¾Ð³Ð´Ð° Ð¼ÐµÑÑÐ¾ Ð²ÑÑÑÐµÑÐ¸ Ð±ÑÐ¾ÑÐ°ÐµÑÑÑ Ð½Ð° ÐºÐ°ÑÑÑ, ÑÐ¾ Ð²Ð¾ÐºÑÑÐ³ Ð½ÐµÐ³Ð¾ Ð½Ð°Ð´Ð¾ ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ 3 ÐºÑÑÐ³Ð°, Ñ ÑÐ°Ð´Ð¸ÑÑÐ°Ð¼Ð¸ 5 ÐºÐ¼, 10 ÐºÐ¼ Ð¸ 15 ÐºÐ¼ (Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ Ð¾Ð²ÐµÑÐ»ÐµÐ¸)
 
 11. ÐÐ° ÐºÐ°ÐºÐ¾Ð¹-ÑÐ¾ Ð¿Ð¾Ð»ÑÐ¿ÑÐ¾Ð·ÑÐ°ÑÐ½Ð¾Ð¹ Ð²ÑÑÑÐµ Ð² Ð¾Ð´Ð½Ð¾Ð¼ Ð¸Ð· ÑÐ³Ð»Ð¾Ð² Ð²Ð°Ð¼ Ð½Ð°Ð´Ð¾ Ð¿Ð¾ÐºÐ°Ð·Ð°ÑÑ ÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð¿Ð¾Ð¿Ð°Ð´Ð°ÑÑ Ð² ÐºÐ°ÐºÐ¾Ð¹ ÐºÑÑÐ³. Ð¡ÑÑÑ ÑÐ°ÐºÐ°Ñ, ÑÐµÐ¼ Ð´Ð°Ð»ÑÑÐµ ÑÑÑÐ´ÐµÐ½Ñ Ð¶Ð¸Ð²ÐµÑ, ÑÐµÐ¼ Ð¼ÐµÐ½ÑÑÐµ Ð²ÐµÑÐ¾ÑÑÐ½Ð¾ÑÑÑ ÑÑÐ¾ Ð¾Ð½ Ð¿ÑÐ¸Ð´ÐµÑ Ð½Ð° Ð²ÑÑÑÐµÑÑ. Ð Ð°ÑÑÑÐ¾ÑÐ½Ð¸Ðµ Ð¾Ñ ÑÑÑÐ´ÐµÐ½ÑÐ° Ð´Ð¾ Ð¼ÐµÑÑÐ° Ð²ÑÑÑÐµÑÐ¸ ÑÐ°ÑÑÑÐ¸ÑÑÐ²Ð°Ð¹ÑÐµ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÑ ÑÑÐ½ÐºÑÐ¸Ñ Ð´Ð»Ñ ÑÐ°ÑÑÐµÑÐ° ÑÐ°ÑÑÑÐ¾ÑÐ½Ð¸Ñ Ð¼ÐµÐ¶Ð´Ñ ÑÐ¾ÑÐºÐ°Ð¼Ð¸, Ð¿Ð¾Ð¸ÑÐ¸ÑÐµ ÐµÐµ Ð² ÑÑÐµÐ¹Ð¼Ð²Ð¾ÑÐºÐµ :)
 
 12. Ð¡Ð´ÐµÐ»Ð°Ð¹ÑÐµ Ð½Ð° Ð½Ð°Ð²Ð¸Ð³ÐµÐ¹ÑÐ¸Ð½Ðµ ÐºÐ½Ð¾Ð¿Ð¾ÑÐºÑ, Ð¿Ð¾ Ð½Ð°Ð¶Ð°ÑÐ¸Ñ Ð½Ð° ÐºÐ¾ÑÐ¾ÑÑÑ, Ð¾Ñ ÑÐ°Ð½Ð´Ð¾Ð¼Ð½ÑÑ ÑÑÑÐ´ÐµÐ½ÑÐ¾Ð² Ð´Ð¾ Ð½ÐµÐµ Ð±ÑÐ´ÑÑ Ð¿ÑÐ¾Ð»Ð¾Ð¶ÐµÐ½Ñ Ð¼Ð°ÑÑÑÑÑÑ (ÑÐ¸Ð¿Ð¾ ÑÑÑÐ´ÐµÐ½ÑÑ Ð¸Ð´ÑÑ Ð½Ð° ÑÑÐ¾Ð´ÐºÑ), Ð¿ÑÐ¸ÑÐ¾Ð¼ Ð²ÐµÑÐ¾ÑÑÐ½Ð¾ÑÑÐ¸ Ð³ÐµÐ½ÐµÑÐ°ÑÐ¾ÑÐ° ÑÐ°Ð·Ð½ÑÐµ, Ð·Ð°Ð²Ð¸ÑÐ¸Ñ Ð¾Ñ ÐºÑÑÐ³Ð°, Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ Ð¾Ð½Ð¸ Ð½Ð°ÑÐ¾Ð´ÑÑÑÑ, ÐµÑÐ»Ð¸ Ð¾Ð½ Ð±Ð»Ð¸Ð·ÐºÐ¾, ÑÐ¾ 90%, Ð° ÐµÑÐ»Ð¸ Ð´Ð°Ð»ÐµÐºÐ¾ - ÑÐ¾ 10%
 
 Ð¡Ð»Ð¾Ð¶Ð½Ð¾, Ð½Ð¾, Ð½Ð°Ð´ÐµÑÑÑ, Ð¸Ð½ÑÐµÑÐµÑÐ½Ð¾ :)
 */
